Script started on Wed 21 Oct 2015 12:43:34 AM EDT
]0;eiglikov@erikpc: ~/github/oop345/w5eiglikov@erikpc:~/github/oop345/w5$ whoami
eiglikov
]0;eiglikov@erikpc: ~/github/oop345/w5eiglikov@erikpc:~/github/oop345/w5$ cat w5.cpp Notifications.* Message.*
// Workshop 5 - Containers
// w5.cpp

#include <iostream>
#include <fstream>
#include "Message.h"
#include "Notifications.h"

const char REC_DELIMITER = '\n';

w5::Notifications collect(std::ifstream& in, char recDelim) {
    w5::Notifications notifications;

    do {
        w5::Message message(in, recDelim);
        if (!message.empty())
            notifications += std::move(message);
    } while(in);

    return notifications;
}

int main(int argc, char* argv[]) {
    if (argc == 1) {
        std::cerr << argv[0] << ": missing file operand\n";
        return 1;
    }
    else if (argc != 2) {
        std::cerr << argv[0] << ": too many arguments\n";
        return 2;
    }
    std::ifstream file(argv[1]);
    if (!file) {
        std::cerr << argv[0] << "\n: Failed to open " << argv[1] << "\n";
        return 3;
    }

    std::cout << "\nNotifications\n=============\n\n";
    w5::Notifications notifications = collect(file, REC_DELIMITER);

    notifications.display(std::cout);

    std::cout << "Press any key to continue ... ";
    std::cin.get();
}//Notifications.cpp
#include "Notifications.h"
namespace w5 {
    Notifications::Notifications() //default constructor - empty
    {
        saved = 0;
        for (int i = 0; i < 10; ++i)
            msg[i] = new Message();

    }
    Notifications::Notifications(const Notifications& src) //- copy constructor
    {
        saved=src.saved;
        for (int i = 0; i<saved;i++)
            msg[i] = src.msg[i];
    }
    Notifications& Notifications::operator=(const Notifications& src)// - copy assignment operator
    {
        if (this != &src)
        {
            saved = src.saved;
            for (int i = 0; i<saved;i++)
                msg[i] = src.msg[i];
        }
        return *this;
    }
    Notifications::Notifications(Notifications&& src)// - move constructor
    {
        saved = src.saved;
        for (int i = 0; i < src.saved; i++)
        {
            msg[i] = src.msg[i];
        }

        for (int i = 0; i < src.saved; ++i)
        {
            delete src.msg[i];
            src.msg[i] = NULL;
        }
    }

    Notifications& Notifications::operator=(Notifications&& src) // - move assignment operator
    {
        if (this != &src)
        {
            saved = src.saved;
            src.saved = 0;
            for (int i = 0; i<saved;i++)
            {
                msg[i] = src.msg[i];
            }

            for (int i = 0; i < saved; ++i)
            {
                delete src.msg[i];
                src.msg[i] = NULL;
            }
        }
        return *this;
    }

    Notifications::~Notifications()// - destructor
    {
        if (saved > 0)
        {
            for (int i = 0; i < saved; ++i)
            {
                delete msg[i];
                msg[i] = NULL;
            }
        }
    }
    void Notifications::operator+=(const Message& msg) // - adds msg to the set
    {
        if (saved < 10)
        {
            *this->msg[saved] = msg;
            ++saved;
        }
    }

    void Notifications::display(std::ostream& os) const //- inserts the Message objects to the os output stream
    {

        for (int i = 0; i < saved;i++)
            msg[i]->display(std::cout);

    }
}//w5//Notifications.h
#pragma once
#include <iostream>
#include "Message.h"
namespace w5{
    class Notifications
    {
        int saved;
        Message* msg[10];
    public:
        Notifications();
        Notifications(const Notifications& src);
        Notifications& operator=(const Notifications& src);
        Notifications(Notifications&& src);
        Notifications& operator=(Notifications&& src);
        ~Notifications();
        void operator+=(const Message& msg);
        void display(std::ostream& os) const;
    };
}//w5//Message.cpp
#include "Message.h"

namespace w5 {

    Message::Message() { } // returns true if the object is in a safe empty state

    Message::Message(std::ifstream &in, char c) {
        if (!in.eof()) {
            getline(in, user, ' ');

            if (in.peek() == '@') {
                in.get();
                getline(in, reply, ' ');
            }

            getline(in, tweet, c);
        }
    }

    bool Message::empty() const // returns true if the object is in a safe empty state
    {
        return reply == "" && tweet == "" ? true : false;
    }

    void Message::display(std::ostream &os) const // displays the Message objects within the container
    {
        if (!empty()) {
            os << "Message\n User : ";
            os << user << std::endl;

            if (reply != "") {
                os << "Reply : ";
                os << reply << std::endl;
            }
            os << "Tweet : ";
            os << tweet << std::endl;
        }
    }

}//w5//Message.h
#pragma once
#include <fstream>
#include <iostream>

namespace w5{
    class Message{
        std::string user;
        std::string reply;
        std::string tweet;

    public:
        Message(); // returns true if the object is in a safe empty state
        Message(std::ifstream& in, char c); /*- constructor retrieves a record from the in file object,
 * parses the record (as described above) and stores its components in the Message object.
 * c is the character that delimits each record*/

        bool empty() const; // returns true if the object is in a safe empty state
        void display(std::ostream& os) const; // displays the Message objects within the container
    };
}//w5]0;eiglikov@erikpc: ~/github/oop345/w5eiglikov@erikpc:~/github/oop345/w5$ g++ -o w5 -std=c++0x w5.cpp Notifications.cp p Message.cpp
]0;eiglikov@erikpc: ~/github/oop345/w5eiglikov@erikpc:~/github/oop345/w5$ ./w5 w5_test.dat

Notifications
=============

Message
 User : jim
Tweet : Workshop 5 is cool
Message
 User : harry
Reply : jim
Tweet : working on workshop 5 now
Message
 User : dave
Tweet : what the ^#$%!
Message
 User : john
Reply : harry
Tweet : I'm done
Press any key to continue ... 
]0;eiglikov@erikpc: ~/github/oop345/w5eiglikov@erikpc:~/github/oop345/w5$ ei[Kxt[Kit
exit

Script done on Wed 21 Oct 2015 12:44:23 AM EDT
